{
  "name": "radio-wifi-configuration",
  "version": "1.0.0",
  "description": "A modern WiFi provisioning solution for Raspberry Pi Zero 2 W, built with Nuxt 3 and Docker",
  "private": true,
  "type": "module",
  "author": "Radio Project",
  "license": "MIT",
  "homepage": "https://github.com/your-username/radio001",
  "repository": {
    "type": "git",
    "url": "https://github.com/your-username/radio001.git"
  },
  "bugs": {
    "url": "https://github.com/your-username/radio001/issues"
  },
  "keywords": [
    "raspberry-pi",
    "wifi",
    "configuration",
    "nuxt",
    "docker",
    "iot",
    "provisioning",
    "hotspot",
    "captive-portal"
  ],
  "engines": {
    "node": ">=20.19.0",
    "npm": ">=8.0.0"
  },
  "scripts": {
    "dev": "echo 'Start backend: docker-compose up radio-backend -d' && echo 'Start frontend: cd frontend && npm run dev'",
    "dev:backend": "docker-compose up radio-backend -d",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:full": "docker-compose up radio-backend -d && cd frontend && npm run dev",
    "dev:stop": "docker-compose down",
    "dev:logs": "docker-compose logs radio-backend",
    "dev:shell": "docker-compose exec radio-backend bash",
    "build": "cd frontend && npm run build",
    "build:docker": "docker build -f docker/Dockerfile -t radio-wifi:latest .",
    "build:multi-arch": "docker buildx build --platform linux/amd64,linux/arm64 -f docker/Dockerfile -t radio-wifi:latest .",
    "preview": "cd frontend && npm run preview",
    "prod:up": "docker-compose -f docker-compose.prod.yml up -d",
    "prod:down": "docker-compose -f docker-compose.prod.yml down",
    "prod:logs": "docker-compose -f docker-compose.prod.yml logs -f",
    "prod:restart": "docker-compose -f docker-compose.prod.yml restart",
    "prod:build": "docker-compose -f docker-compose.prod.yml build --no-cache",
    "install:frontend": "cd frontend && npm install",
    "install:legacy": "cd app && npm install",
    "install:all": "npm run install:frontend",
    "setup:frontend": "./setup-frontend.sh",
    "lint": "cd frontend && npm run lint",
    "lint:fix": "cd frontend && npm run lint:fix",
    "type-check": "cd frontend && npm run check",
    "test": "echo \"No tests specified yet\"",
    "health": "curl -f http://localhost:3000/api/health || curl -f http://radio.local:3000/api/health",
    "workflow:init": "git checkout develop 2>/dev/null || git checkout -b develop",
    "workflow:feature": "echo 'Usage: npm run workflow:feature -- feature-name' && exit 1",
    "workflow:pr": "echo 'Create PR: develop -> main' && echo 'Visit: https://github.com/$(git remote get-url origin | sed \"s/.*github.com[:\\/]//\" | sed \"s/.git$//\")/compare/main...develop'",
    "workflow:status": "echo 'Current branch:' && git branch --show-current && echo 'Status:' && git status --porcelain",
    "quick:check": "npm run lint && npm run type-check",
    "quick:fix": "npm run lint:fix",
    "setup:pi": "./scripts/setup-pi.sh",
    "deploy:pi": "./scripts/deploy-pi.sh",
    "backup:config": "./scripts/backup-config.sh",
    "restore:config": "./scripts/restore-config.sh",
    "clean": "rm -rf app/.nuxt app/.output app/dist app/node_modules node_modules",
    "clean:docker": "docker system prune -f && docker volume prune -f",
    "docs:dev": "echo \"Documentation development not set up yet\"",
    "docs:build": "echo \"Documentation build not set up yet\"",
    "release": "echo \"Release process not set up yet\"",
    "prepare": "husky || echo 'Husky install skipped in CI'",
    "postinstall": "./scripts/setup-hooks.sh || echo 'Hook setup skipped'"
  },
  "devDependencies": {
    "@types/node": "^20.10.4",
    "typescript": "^5.3.3",
    "husky": "^8.0.3"
  },
  "optionalDependencies": {},
  "lint-staged": {
    "frontend/**/*.{js,ts,svelte}": [
      "cd frontend && npm run lint:fix"
    ],
    "frontend/**/*.{js,ts,svelte,css,md}": [
      "cd frontend && npm run check"
    ]
  },
  "workspaces": [
    "frontend"
  ],
  "config": {
    "app_name": "Radio WiFi Configuration",
    "default_hostname": "radio",
    "default_port": 3000,
    "supported_architectures": [
      "linux/amd64",
      "linux/arm64"
    ]
  },
  "directories": {
    "app": "./app",
    "config": "./config",
    "scripts": "./scripts",
    "docker": "./docker",
    "docs": "./docs"
  }
}

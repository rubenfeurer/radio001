name: Main CI/CD - Full Validation & Deployment

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: "20"

jobs:
  # =============================================================================
  # Pre-flight Checks (for PRs)
  # =============================================================================
  pre-flight:
    name: Pre-flight Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Run frontend type checking
        run: |
          cd frontend
          npm run check

      - name: Build frontend application
        run: |
          cd frontend
          npm run build

      - name: Test backend health
        run: |
          docker-compose up radio-backend -d
          sleep 10
          curl -f http://localhost:8000/health
          docker-compose down

  # =============================================================================
  # Full Integration Tests (for PRs and main pushes)
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test backend
        run: |
          docker-compose up radio-backend -d
          sleep 15
          curl -f http://localhost:8000/health
          docker-compose logs radio-backend
          docker-compose down

      - name: Build and test frontend
        run: |
          cd frontend
          npm ci
          npm run build
          npm run preview &
          sleep 10
          curl -f http://localhost:4173 || curl -f http://localhost:3000
          pkill -f "npm run preview" || true

      - name: Test production deployment
        run: |
          cd frontend && npm run build
          docker-compose -f docker-compose.prod.yml up -d
          sleep 20
          curl -f http://localhost || echo "Production test skipped - no nginx setup in CI"
          docker-compose -f docker-compose.prod.yml down

  # =============================================================================
  # Build and Push Images (for main branch)
  # =============================================================================
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: pre-flight
    if: always() && (needs.pre-flight.result == 'success' || github.event_name != 'pull_request')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for frontend build
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend for CI
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Build and test with Docker
        run: |
          # Build backend container
          docker compose -f docker-compose.ci.yml build radio-backend --no-cache

          # Start services
          docker compose -f docker-compose.ci.yml up -d

          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 45

          # Show running containers for debugging
          docker compose -f docker-compose.ci.yml ps

          # Test backend health first (frontend depends on it)
          echo "Testing backend health..."
          for i in {1..10}; do
            if curl -f http://localhost:8000/health; then
              echo "Backend health check passed"
              break
            else
              echo "Backend health check failed (attempt $i/10)"
              if [ $i -eq 10 ]; then
                echo "Backend logs:"
                docker compose -f docker-compose.ci.yml logs radio-backend
                exit 1
              fi
              sleep 10
            fi
          done

          # Test frontend health
          echo "Testing frontend health..."
          for i in {1..10}; do
            if curl -f http://localhost:3000; then
              echo "Frontend health check passed"
              break
            else
              echo "Frontend health check failed (attempt $i/10)"
              if [ $i -eq 10 ]; then
                echo "Frontend logs:"
                docker compose -f docker-compose.ci.yml logs radio-frontend
                exit 1
              fi
              sleep 5
            fi
          done

          # Test API proxy through frontend
          echo "Testing API proxy..."
          if curl -f http://localhost:3000/api/health; then
            echo "API proxy test passed"
          else
            echo "API proxy test failed - this may be expected in CI"
          fi

          echo "All health checks passed!"

        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.ci.yml logs
          docker compose -f docker-compose.ci.yml down -v

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: integration

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # =============================================================================
  # Docker Build & Push
  # =============================================================================
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [integration, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.dev
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # Multi-Architecture Manifest
  # =============================================================================
  docker-manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          IMAGE_TAG=${GITHUB_REF#refs/heads/}
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            IMAGE_TAG="latest"
          fi

          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}-linux-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}-linux-arm64

          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}

  # =============================================================================
  # Deployment (only on main branch)
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deployment to staging would happen here"
          echo "This could involve:"
          echo "- SSH to staging server"
          echo "- Pull latest images"
          echo "- Update docker-compose.prod.yml"
          echo "- Restart services"
          echo "- Run health checks"

  # =============================================================================
  # Release Deployment
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Production deployment would happen here"
          echo "This could involve:"
          echo "- Deploy to multiple Pi devices"
          echo "- Rolling updates"
          echo "- Health monitoring"
          echo "- Rollback capability"

  # =============================================================================
  # Documentation
  # =============================================================================
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build documentation
        run: |
          echo "Documentation build would happen here"
          echo "This could generate:"
          echo "- API documentation from FastAPI"
          echo "- Component documentation from Vue"
          echo "- User guides from README"
          echo "- Installation instructions"

      - name: Deploy to GitHub Pages
        if: success()
        run: |
          echo "Deploy docs to GitHub Pages"

  # =============================================================================
  # Notification
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [pre-flight, integration, security, docker-build]
    if: always()

    steps:
      - name: PR Validation Summary
        if: github.event_name == 'pull_request'
        run: |
          echo "🔍 Pull Request Validation Summary"
          echo "================================="
          echo "Pre-flight: ${{ needs.pre-flight.result }}"
          echo "Integration: ${{ needs.integration.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo ""

          if [ "${{ needs.pre-flight.result }}" = "success" ] && \
             [ "${{ needs.integration.result }}" = "success" ] && \
             [ "${{ needs.security.result }}" = "success" ]; then
            echo "✅ PR validation passed! Safe to merge to main."
          else
            echo "❌ PR validation failed. Please fix issues before merging."
          fi

      - name: Main Branch Summary
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🚀 Main Branch Deployment Summary"
          echo "================================="
          echo "Integration: ${{ needs.integration.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo ""

          if [ "${{ needs.integration.result }}" = "success" ] && \
             [ "${{ needs.security.result }}" = "success" ] && \
             [ "${{ needs.docker-build.result }}" = "success" ]; then
            echo "✅ Main branch validation completed! Ready for deployment."
          else
            echo "❌ Main branch validation failed!"
          fi

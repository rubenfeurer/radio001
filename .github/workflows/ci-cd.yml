name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Code Quality & Testing
  # =============================================================================
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install app dependencies
        working-directory: ./app
        run: npm install

      - name: Run type checking
        working-directory: ./app
        run: npm run type-check

      - name: Run linting
        working-directory: ./app
        run: npm run lint

      - name: Build application
        working-directory: ./app
        run: npm run build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test with Docker
        run: |
          docker-compose build
          docker-compose up -d
          sleep 20
          curl -f http://localhost:3000/api/health || exit 1
          docker-compose down

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # =============================================================================
  # Docker Build & Push
  # =============================================================================
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.dev
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # Multi-Architecture Manifest
  # =============================================================================
  docker-manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'

    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          IMAGE_TAG=${GITHUB_REF#refs/heads/}
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            IMAGE_TAG="latest"
          fi

          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}-linux-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}-linux-arm64

          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}

  # =============================================================================
  # Deployment (only on main branch)
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deployment to staging would happen here"
          echo "This could involve:"
          echo "- SSH to staging server"
          echo "- Pull latest images"
          echo "- Update docker-compose.prod.yml"
          echo "- Restart services"
          echo "- Run health checks"

  # =============================================================================
  # Release Deployment
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Production deployment would happen here"
          echo "This could involve:"
          echo "- Deploy to multiple Pi devices"
          echo "- Rolling updates"
          echo "- Health monitoring"
          echo "- Rollback capability"

  # =============================================================================
  # Documentation
  # =============================================================================
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build documentation
        run: |
          echo "Documentation build would happen here"
          echo "This could generate:"
          echo "- API documentation from FastAPI"
          echo "- Component documentation from Vue"
          echo "- User guides from README"
          echo "- Installation instructions"

      - name: Deploy to GitHub Pages
        if: success()
        run: |
          echo "Deploy docs to GitHub Pages"

  # =============================================================================
  # Notification
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security, docker-build]
    if: always()

    steps:
      - name: Notify on success
        if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && needs.docker-build.result == 'success' }}
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "All tests passed, security checks passed, Docker images built"

      - name: Notify on failure
        if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.docker-build.result == 'failure' }}
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Test result: ${{ needs.test.result }}"
          echo "Security result: ${{ needs.security.result }}"
          echo "Docker build result: ${{ needs.docker-build.result }}"
